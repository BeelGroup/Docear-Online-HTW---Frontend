# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /favicon.ico                controllers.Assets.at(path="/public", file="images/favicon.ico")
GET     /robots.txt                 controllers.Assets.at(path="/public", file="robots.txt")
GET     /                           @controllers.Application.index()
GET     /error/:errorId             controllers.Application.error(errorId: String)
GET	    /help						controllers.Application.help()

POST	/feedback					controllers.Application.feedback()

# Mindmap (old)
## get information
### json
GET		/api/v1/map/:mapId/json					   @controllers.MindMap.mapAsJson(projectId = "-1", mapId: String, nodeCount : Integer ?= -1)
GET		/api/v1/map/:mapId/json/node/:nodeId 		@controllers.MindMap.getNode(projectId = "-1", mapId: String, nodeId: String,nodeCount : Integer ?= -1)

### xml
GET		/api/v1/map/:mapId/xml					@controllers.MindMap.mapAsXml(projectId = "-1",mapId: String)

### updates
GET		/api/v1/map/:mapId/listen				@controllers.MindMap.listenForUpdates(projectId = "-1",mapId: String)
GET		/api/v1/map/:mapId/updates/:revision	@controllers.MindMap.fetchUpdatesSinceRevision(projectId = "-1",mapId: String, revision: Integer)

## altering actions
DELETE	/api/v1/map/:mapId/node/delete			@controllers.MindMap.deleteNode(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/create			@controllers.MindMap.createNode(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/change			@controllers.MindMap.changeNode(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/move			@controllers.MindMap.moveNode(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/requestLock		@controllers.MindMap.requestLock(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/releaseLock		@controllers.MindMap.releaseLock(projectId = "-1",mapId: String)
POST	/api/v1/map/:mapId/node/changeEdge		@controllers.MindMap.changeEdge(projectId = "-1",mapId: String)

# Mindmap (new)
## get information
### json
GET		/api/v1/project/:projectId/map/:mapId/json 					@controllers.MindMap.mapAsJson(projectId: String, mapId: String, nodeCount : Integer ?= -1)
GET		/api/v1/project/:projectId/map/:mapId/json/node/:nodeId 	@controllers.MindMap.getNode(projectId: String, mapId: String, nodeId: String,nodeCount : Integer ?= -1)

### xml
GET		/api/v1/project/:projectId/map/:mapId/xml					@controllers.MindMap.mapAsXml(projectId: String,mapId: String)

### updates
GET		/api/v1/project/:projectId/map/:mapId/listen				@controllers.MindMap.listenForUpdates(projectId: String,mapId: String)
GET		/api/v1/project/:projectId/map/:mapId/updates/:revision	@controllers.MindMap.fetchUpdatesSinceRevision(projectId: String, mapId: String, revision: Integer)

## altering actions
DELETE	/api/v1/project/:projectId/map/:mapId/node/delete			@controllers.MindMap.deleteNode(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/create			@controllers.MindMap.createNode(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/change			@controllers.MindMap.changeNode(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/move				@controllers.MindMap.moveNode(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/requestLock		@controllers.MindMap.requestLock(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/releaseLock		@controllers.MindMap.releaseLock(projectId: String,mapId: String)
POST	/api/v1/project/:projectId/map/:mapId/node/changeEdge		@controllers.MindMap.changeEdge(projectId: String,mapId: String)

# Projects
## manage
POST	/api/v1/project/create					@controllers.ProjectController.createProject()
POST	/api/v1/project/:projectId/addUser		@controllers.ProjectController.addUserToProject(projectId: String)
POST	/api/v1/project/:projectId/removeUser	@controllers.ProjectController.removeUserFromProject(projectId: String)
GET		/api/v1/project/:projectId				@controllers.ProjectController.getProject(projectId: String)


## files
GET		/api/v1/project/:projectId/file/*path		@controllers.ProjectController.getFile(projectId: String, path: String)
PUT		/api/v1/project/:projectId/file/*path		@controllers.ProjectController.putFile(projectId: String, path: String, zip : Boolean ?= false)
POST	/api/v1/project/:projectId/create_folder	@controllers.ProjectController.createFolder(projectId: String)
GET		/api/v1/project/:projectId/metadata/*path	@controllers.ProjectController.metadata(projectId: String, path: String)
GET		/api/v1/project/:projectId/metadata			@controllers.ProjectController.metadata(projectId: String, path = "")
POST	/api/v1/project/:projectId/delta			@controllers.ProjectController.projectVersionDelta(projectId: String)


# User
POST	/login						@controllers.User.login()
POST	/api/v1/user/login			@controllers.User.loginRest()
GET		/api/v1/user/maps	   		@controllers.User.mapListFromDB()
GET		/api/v1/user/projects		@controllers.User.projectListFromDB()

#TODO should be POST: http://de.wikipedia.org/wiki/Cross-Site_Request_Forgery
GET 	/logout						@controllers.User.logout()
GET 	/profile					@controllers.User.profile()

GET     /assets/webjars/*file       controllers.WebJarAssets.at(file)
GET     /assets/javascripts/routes.js controllers.Application.javascriptRoutes()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


# untrailing GET
GET		/*path/			controllers.Application.untrail(path: String)