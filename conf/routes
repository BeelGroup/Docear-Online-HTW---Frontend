# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /favicon.ico                controllers.Assets.at(path="/public", file="images/favicon.ico")
GET     /robots.txt                 controllers.Assets.at(path="/public", file="robots.txt")
GET     /                           @controllers.Application.index()
GET     /error/:errorId             controllers.Application.error(errorId: String)
GET	    /help						controllers.Application.help()
GET     /rest/v1/user/xyz/mindmap/1.json    controllers.Assets.at(path="/public", file="mindmaps/example1.json")

POST	/feedback					controllers.Application.feedback()

# Mindmap
GET		/map/:mapId/json			@controllers.MindMap.mapAsJson(mapId: String, nodeCount : Integer ?= -1)
GET		/map/:mapId/xml				@controllers.MindMap.mapAsXml(mapId: String)


GET		/map/:mapId/node/:nodeId	@controllers.MindMap.getNode(mapId: String, nodeId: String,nodeCount : Integer ?= -1)

DELETE	/map/:mapId/node/delete			@controllers.MindMap.deleteNode(mapId: String)
POST	/map/:mapId/node/create			@controllers.MindMap.createNode(mapId: String)
POST	/map/:mapId/node/change			@controllers.MindMap.changeNode(mapId: String)
POST	/map/:mapId/node/move			@controllers.MindMap.moveNode(mapId: String)
POST	/map/:mapId/node/requestLock	@controllers.MindMap.requestLock(mapId: String)
POST	/map/:mapId/node/releaseLock	@controllers.MindMap.releaseLock(mapId: String)
POST	/map/:mapId/node/changeEdge		@controllers.MindMap.changeEdge(mapId: String)

GET		/map/:mapId/listen				@controllers.MindMap.listenForUpdates(mapId: String)
GET		/map/:mapId/updates/:revision	@controllers.MindMap.fetchUpdatesSinceRevision(mapId: String, revision: Integer)

# Projects
#GET		/project/:projectId/listen					@controllers.ProjectController.listenForUpdates(projectId: Long)
#GET		/project/:projectId/updates/:revision		@controllers.ProjectController.getUpdatesSince(projectId: Long, revision: Integer)

## Project files
GET		/1/files/:projectId/*path					@controllers.ProjectController.getFile(projectId: Long, path: String)
PUT		/1/files_put/:projectId/*path				@controllers.ProjectController.putFile(projectId: Long, path: String)
POST	/1/fileops/create_folder					@controllers.ProjectController.createFolder()
GET		/1/metadata/:projectId/*path				@controllers.ProjectController.metadata(projectId: Long, path: String)
GET		/1/metadata/:projectId						@controllers.ProjectController.metadata(projectId: Long, path = "")
POST	/1/delta									@controllers.ProjectController.projectVersionDelta()


# User
#GET 	/login						controllers.Application.index()
POST	/login						@controllers.User.login()
POST	/user/login					@controllers.User.loginRest()
GET		/user/maps		    		@controllers.User.mapListFromDB()
GET		/user/projects				@controllers.User.projectIdListFromDB()

#TODO should be POST: http://de.wikipedia.org/wiki/Cross-Site_Request_Forgery
GET 	/logout						@controllers.User.logout()
GET 	/profile					@controllers.User.profile()

GET     /assets/webjars/*file       controllers.WebJarAssets.at(file)
GET     /assets/javascripts/routes.js controllers.Application.javascriptRoutes()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


# untrailing
GET		/*path/			controllers.Application.untrail(path: String)